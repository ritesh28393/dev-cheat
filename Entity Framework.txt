intro
	Entity Framework is an ORM framework. ORM stands for Object Relational Mapping.
	Object Relational Mapping framework automatically creates classes based on database tables, and the vice versa is also true.
	it can also automatically generate necessary SQL to create database tables based on classes. 
	edmx - entity data model. Classes are generated for entity model.
	approach for entity framework
		schema first - we create entities(tables) based on the database's table's meta-data
		Model First - we first create the Entity Model. That is we create Entities, Relationships between them, inheritance etc. Base on this, database's tables are created
		Code First - we first create our custom classes, DBContext derived class and based on those custom classes entity framework generates database's tables for us
	entity - name, scalar properties, navigation properties. Entity is a class defined
	DBContext - consider this as the database. With same name, you have data-connection in config file
	on creating edmx file, following classes are generated
		table_name class having column as its scalar properties
		context class having 
			DbSet<Employee> Employees
			DeleteEmployee(Nullable<int> iD) //ID is the primary key
			InsertEmployee(string name, string gender, Nullable<int> salary)
			UpdateEmployee(Nullable<int> iD, string name, string gender, Nullable<int> salary)
	table mapping maps the properties of the entity to the column of a table (used excessively during entity splitting and table splitting)
	
stored procedure
	by default context uses parameterized query to insert, update or delete rows from tables
	to use stored procedure, click on table model and select "stored procedure mapping".
	
entity splitting (entity is split among multiples tables)
	Entity splitting refers to mapping an entity to two or more tables where the tables share a common key
	common key column make sure data are modified(CRUD operation) correctly to both table in database
	example - get all properties of Employee(EmployeeID, Name, Gender) entity and EmployeeContactDetail(EmployeeID, Email, Mobile) entity into one entity(Employee) 
		Cut Email and Mobile properties from EmployeeContactDetail entity and paste them in Employee entity
		Delete EmployeeContactDetail entity. On "Delete Unmapped Tables and Views" window click NO.
		Right click on Employee entity and select "Table Mapping" option from the context menu. 
		Map EmployeeId, Email, Mobile properties(now of Employee entity) to the respective columns of EmployeeContactDetails table. 

table splitting (table is spit among multiples entities)
	Table Splitting is the opposite of Entity Splitting. 
	Mapping multiple entities to a single table is called table splitting. 
	Table Splitting is useful when you want to delay the loading of some properties with large data when using lazy loading. 
	example - split Employee(EmployeeID, Name, Gender, Email, Mobile) entity into Employee(EmployeeID, Name, Gender) entity and EmployeeContactDetail(EmployeeID, Email, Mobile) entity 
		Create another entity(EmployeeContactDetail) with EmployeeID as the key by right clicking on the entity designer and selecting "Add Entity" option from the context menu
		Cut Email, Mobile and LandLine properties from Employee entity and paste them in EmployeeContactDetail entity
		Right click on the entity designer and select "Add - Association" option from the context menu. Make one-one multiplicity association
		Right click on the association and select "Properties". Add "Referential Constraint" property(EmployeeContactDetail.EmployeeID depends on Employee.EmployeeID). 
		Right click on "EmployeeContactDetail" entity and select "Table Mapping" option from the context menu. 
		Select "Employees" table and map EmployeeId, Email and Mobile properties of the entity to the respective columns of the table.
		to get 
			 List<Employee> employeesPartialInfo = employeeDBContext.Employees.ToList();
			 List<Employee> employeesAllInfo = employeeDBContext.Employees.Include("EmployeeContactDetail").ToList();
	
conditional mapping
	where clause can be applied at two places
		EmployeeDBContext.Employees.Where(...).ToList();
		in the edmx file. This is the permanent filter on the entity. EmployeeDBContext.Employees will always have the where clause specified in the conditional mapping
	example - retrieve those Employee who are not terminated(IsTerminated = false)
		Right click on the entity and select "Table Mapping" option from the context menu
		Add the condition - When Is Terminated = false
		table column cannot be mapped more than once. We have used IsTerminated column in conditional mapping, so delete it from Employee entity.

Self referencing association
	table is self referencing when the foreign key is dependent on the primary key of the same table.
		EmployeeID int primary key identity,
		EmployeeName nvarchar(50),
		ManagerID int foreign key references Employees(EmployeeID)
	if you generate an ADO.NET entity data model based on this Employees table, 2 navigation properties (Employees1 & Employee1) are automatically created.  
		Employees1(Multiplicity is set to Many) -  this navigation property returns employees who are subordinates.  
		Employee1(Multiplicity is set to Zero or One) - this navigation property returns the manager of an employee. 
	Navigational properties name can be modified in the edmx file itself
	example - display Employee names and their respective manager names
		employeeDBContext.Employees.Select(emp => new {
			EmployeeName = emp.EmployeeName,
			ManagerName = emp.Manager == null ? "Super Boss" : emp.Manager.EmployeeName //change name of the navigational property "Employee1" to "Manager"
		}).ToList();
		
Table Per Hierarchy TPH inheritance 
	In TPH inheritance one database table is used to store data for all of the entity types in the inheritance hierarchy
	consider Employee table with ID, FirstName, LastName, Gender, AnuualSalary, HourlyPay, HoursWorked, Discriminator columns. This will create Employee entity but we want 3 entities
		Employee - This should be an abstract class and should contain all the common properties of permanent and contract employees. ID, FirstName, LastName and Gender properties
		PermanentEmployee - This class should inherit from the abstract Employee class and should contain AnnualSalary property
		ContractEmployee - This class should inherit from the abstract Employee class and should contain HourlyPay & HoursWorked properties
	To achieve this
		Add Entities (PermanentEmployee and ContractEmployee) with base type as Employee
		Cut AnnualSalary property from Employee entity and paste it in Permanent Employee entity.
		Cut HourlyPay & HoursWorked properties from Employee entity and paste then in Contract Employee entity
		select Table Mapping option for PermanentEmployee
			map PermanentEmployee entity to Employees table. 
			also use Discriminator column in conditional mapping to determine when an Employee can be PermanentEmployee. 
		similarly select Table Mapping option for ContractEmployee
			map ContractEmployee entity to Employees table. 
			also use Discriminator column in conditional mapping to determine when an Employee can be ContractEmployee
		Since we are using Discriminator column in conditional mapping we cannot use it again with property mapping in Employee entity. So delete it from there.
		Finally right click on Employee entity and select properties. In the properties window set Abstract=true. This should make Employee class an abstract class. 
	to get different types of employees
		var permanentEmployees = employeeDBContext.Employees.OfType<PermanentEmployee>().ToList();
		var contractEmployees = employeeDBContext.Employees.OfType<ContractEmployee>().ToList();
		var employees = employeeDBContext.Employees.select(employee => new {
			ID = employee.ID;
			FirstName = employee.FirstName;
			LastName = employee.LastName;
			Gender = employee.Gender;
			if (employee is PermanentEmployee)
			{
				AnuualSalary = ((PermanentEmployee)employee).AnuualSalary;
				Type = "Permanent";
			}
			else
			{
				HourlyPay = ((ContractEmployee)employee).HourlyPay;
				HoursWorked = ((ContractEmployee)employee).HoursWorked;
				Type = "Contract";
			}
		}).ToList();
		
Table Per Type (TPT) inheritance
	We will be using the following 3 tables to implement Table Per Type (TPT) inheritance
		Employees - EmployeeID, FirstName, LastName, Gender
		PermanentEmployees -  EmployeeID int foreign key references Employees(EmployeeID) not null, AnnualSalary
		ContractEmployees - EmployeeID int foreign key references Employees(EmployeeID) not null, HourlyPay, HoursWorked
	on generating an ADO.NET entity data model based on the above 3 tables, entities are generated with an association instead of inheritance relation between the entities. 
	to add inheritance
		delete both association
		Add inheritance for PermanentEmployee and ContractEmployee with Employee as base class
		delete the EmployeeID property from both PermanentEmployee & ContractEmployee entities as EmployeeID property will be available from the base Employee entity
		
Many to many relationship
	There is a Many-to-Many relationship between Courses(CourseID, CourseName) and Students(StudentID, StudentName)
		A student can enroll into many courses and a single course can have many students enrolled. 
		The data is stored in the StudentCourses(StudentID, CourseID) bridge table 
	on generating an ADO.NET entity data model, only 2 entities (Student & Course) are generated with a Many-to-Many association between them. 
		entity for the bridge table (StudentCourses) is not generated in the entity model. 
		StudentCourses Many-to-Many association is mapped to StudentCourses database table. 
		we have navigation properties to navigate from Course to Students and from Student to Courses. 
	read operation
		from student in employeeDBContext.Students
		from course in student.Courses
		select new
		{
			StudentName = student.StudentName,
			CourseName = course.CourseName
		};
	add operation
		Course WCFCourse = employeeDBContext.Courses.FirstOrDefault(x => x.CourseID == 4);
		employeeDBContext.Students.FirstOrDefault(x => x.StudentID == 1).Courses.Add(WCFCourse);
		employeeDBContext.SaveChanges();
	delete operation
		Course SQLServerCourse = employeeDBContext.Courses.FirstOrDefault(x => x.CourseID == 3);
		employeeDBContext.Students.FirstOrDefault(x => x.StudentID == 2).Courses.Remove(SQLServerCourse);
		employeeDBContext.SaveChanges();
		
Entity for BridgeTable in many to many relationship
	An entity for the bridge table is NOT created when the bridge table has only the foreign keys. 
	On the other if the bridge table has any other columns apart from the foreign key columns then a bridge table is created.
	tables
		Students(StudentID, StudentName)
		Courses(CourseID, CourseName)
		StudentCourses(StudentID, CourseID, EnrolledDate)
	read operation
		from student in employeeDBContext.Students
		from course in student.StudentCourses
		select new
		{
			StudentName = student.StudentName,
			CourseName = studentCourse.Course.CourseName,
			EnrolledDate = studentCourse.EnrolledDate
		}; 
		//OR
		from student in employeeDBContext.Courses
		from course in student.StudentCourses
		select new
		{
			StudentName = studentCourse.Student.StudentName,
			CourseName = course.CourseName,
			EnrolledDate = studentCourse.EnrolledDate
		}; 
	add operation
		employeeDBContext.StudentCourses.AddObject(new StudentCourse { StudentID = 1, CourseID = 4, EnrolledDate = DateTime.Now });
		employeeDBContext.SaveChanges();